Step 1. Concatenate the training and test data sets by combining rows to get Data array.
	trainData <- read.table("./data/x_train.txt") 		# 7,352 rows and 561 columns
	testData <- read.table("./data/x_test.txt") 		# 2,947 rows and 561 columns
	Data <- rbind(trainData,testData) 			# 10,299 rows and 561 columns
Step 2. Concatenate the training and test activities by binding rows to get Activity vector.
	trainActivity <- read.table("./data/y_train.txt") 	# 7,352 rows and 1 column
	testActivity<- read.table("./data/y_test.txt") 	# 2,947 rows and 1 column
	Activity <- rbind(trainActivity,testActivity)	 	# 10,299 rows and 1 column
Step 3. Concatenate the training and test subjects by combining rows to get Subject vector.
	trainSubject <- read.table("./data/subject_train.txt")# 7,352 rows and 1 column
	testSubject <- read.table("./data/subject_test.txt") 	# 2,947 rows and 1 column
	Subject<- rbind(trainSubject,testSubject)	 	# 10,299 rows and 1 column
Step 5. Index rows of Data by elements from the Subject and Activity vectors, e.g., n11=95. 

Subject	
1=Walking	2=Walking
 upstairs	3=Walking 
Downstairs	
4=Sitting	
5=Standing	
6=Laying	Column
Totals
1	95	53	49	47	53	50	347
2	59	48	47	46	54	48	302
3	58	59	49	52	61	62	341
4	60	52	45	50	56	54	317
5	56	47	47	44	56	52	302
6	57	51	48	55	57	57	325
7	57	51	47	48	53	52	308
8	48	41	38	46	54	54	281
9	52	49	42	50	45	50	288
10	53	47	38	54	44	58	294
11	59	54	46	53	47	57	316
12	50	52	46	51	61	60	320
13	57	55	47	49	57	62	327
14	59	54	45	54	60	51	323
15	54	48	42	59	53	72	328
16	51	51	47	69	78	70	366
17	61	48	46	64	78	71	368
18	56	58	55	57	73	65	364
19	52	40	39	73	73	83	360
20	51	51	45	66	73	68	354
21	52	47	45	85	89	90	408
22	46	42	36	62	63	72	321
23	59	51	54	68	68	72	372
24	58	59	55	68	69	72	381
25	74	65	58	65	74	73	409
26	59	55	50	78	74	76	392
27	57	51	44	70	80	74	376
28	54	51	46	72	79	80	382
29	53	49	48	60	65	69	344
30	65	65	62	62	59	70	383
Row Totals	1722	1544	1406	1777	1906	1944	10299

 
Step 6. Assign variable names to columns of Data using the features vector. 
	 names(Data) <- features[, 2]			 # 561 rows and 1 column 
Step 7. Drop duplicate “BodyBody” columns to get tidyData.
	> grep("BodyBody", features[, 2])			#  39 columns
 	[1] 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 	537 538 539 540 541 542 543 544 545 546 547 [33] 548 549 550 551 552 553 554
	> tidyData <- Data[c(, 1:515,555:561)] 		# 10,299 rows and 522 = 561 – 39 columns
Step 9.  Index columns of tidyData to get standard deviations (SD).
	SD <- tidyData[, grep("std()", features[, 2])] 		# 10,299 rows and 30 columns
Step 10.  Index columns of tidyData to get means including mean frequencies (meanFreq).
	Mean  <- tidyData[, grep("mean()", features[ ,2])] 	# 10,299 rows and 40 columns
	> grep("meanFreq()", features[, 2])			#  10 columns
	 [1] 294 295 296 373 374 375 452 453 454 513
Step 11. Assign variable names to columns of tidyData using the tidyfeatures vector.
	tidyfeatures <- features[c(1:293,297:372,376:451,455:512,514:515,555:561)]
	names(tidyData) <- tidyfeatures[, 2]			 # 551 rows and 1 column 
Step 12. Index columns of tidyData to get means excluding mean frequencies.	
	tidyMean <- tidyData[,grep("mean()",tidyfeatures[, 2])]	 # 10,299 rows and 30 columns
